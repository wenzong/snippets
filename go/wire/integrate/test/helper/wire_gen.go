// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package helper

import (
	"github.com/google/wire"
	"github.com/wenzong/demo/api/pb"
	"github.com/wenzong/demo/biz/user"
	"github.com/wenzong/demo/infra/app"
	"github.com/wenzong/demo/infra/db"
	"github.com/wenzong/demo/infra/grpc"
	"github.com/wenzong/demo/infra/log"
	grpc2 "google.golang.org/grpc"
	"google.golang.org/grpc/test/bufconn"
	"net"
	"testing"
)

// Injectors from wire.go:

func App(t *testing.T) (*app.App, func()) {
	server := NewNilHTTPServer()
	v := NewTestServerOption()
	viper, cleanup := NewTestConfig(t)
	defaultConn := db.NewDefaultConn(viper)
	repository := user.NewRepository(defaultConn)
	service := user.NewService(repository)
	v2 := log.CtxLogger()
	userServer := user.NewServer(service, v2)
	registerServiceFunc := gRPCRegisterServiceFn(userServer)
	grpcServer := grpc.NewServer(v, registerServiceFunc)
	listener := NewTestListener()
	appApp := app.NewApp(server, grpcServer, listener)
	return appApp, func() {
		cleanup()
	}
}

func ClientConn() *grpc2.ClientConn {
	listener := NewTestListener()
	clientConn := NewTestClientConn(listener)
	return clientConn
}

// wire.go:

func gRPCRegisterServiceFn(
	userServer *user.Server,
) grpc.RegisterServiceFunc {
	return func(s *grpc2.Server) *grpc2.Server {
		pb.RegisterUserServiceServer(s, userServer)
		return s
	}
}

var ProviderSet = wire.NewSet(
	NewTestConfig, grpc.NewServer, NewTestListener,
	NewTestServerOption,
	NewTestClientConn,
	NewNilHTTPServer, wire.Bind(new(net.Listener), new(*bufconn.Listener)), gRPCRegisterServiceFn,
)

var Set = wire.NewSet(app.ProviderSet, db.ProviderSet, log.ProviderSet, user.ProviderSet, ProviderSet)
